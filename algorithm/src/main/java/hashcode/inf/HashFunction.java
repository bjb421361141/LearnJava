package hashcode.inf;

/**
 * 哈希函数算法
 *
 * 哈希算法将任意长度的二进制值映射为固定长度的较小二进制值，这个小的二进制值称为哈希值。
 * 就是把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。
 * 这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来唯一的确定输入值
 *
 * 1. 字符串的Hash。最简单可以使用基本的乘法Hash，当乘数为33时，对于英文单词有很好的散列效果（小于6个的小写形式可以保证没有冲突）。复杂一点可以使用FNV算法（及其改进形式），它对于比较长的字符串，在速度和效果上都不错。
 * 2. MD5、Tiger都属于混合哈希。它们一般很少在面向查找的Hash函数里面使用
 */
public abstract class HashFunction {
    /**
     * 根据提供的值进行哈希值计算
     * @param value
     * @return
     */
    public abstract int hash(String value);
}